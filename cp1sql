/*
CP 1 - ENTREGA DIA 23/03
LUIS HENRIQUE RM552692
SABRINA CAFÉ RM553568
MATHEUS DUARTE RM554199
*/

CREATE TABLE tabela_de_pedidos AS 
SELECT * FROM PF1788.PEDIDO;

SELECT COUNT(*) FROM tabela_de_pedidos;--QUANTOS RESULTADOS APARECERAM

--CONFERINDO OS RESULTADOS NA TABELA DO PROFESSOR...
SELECT * FROM tabela_de_pedidos FETCH FIRST 10 ROWS ONLY; 

DESC tabela_de_pedidos;

/**************************************************************************/


SET SERVEROUTPUT ON;



-- EX1: Desenvolvimento do Modelo Estrela

--VERIFICANDO MINHAS CHAVES ESTRANGEIRAS
SELECT constraint_name, table_name, column_name, r_constraint_name
FROM user_cons_columns
WHERE constraint_name IN (
  SELECT constraint_name
  FROM user_constraints
  WHERE constraint_type = 'R'
);


--VERICANDO AS FK DA TABELA
SELECT a.constraint_name, a.table_name, a.column_name,
       c.r_constraint_name, c.table_name AS referenced_table
FROM user_cons_columns a
JOIN user_constraints c
  ON a.constraint_name = c.constraint_name
WHERE c.constraint_type = 'R'
  AND a.table_name = 'TABELA_DE_PEDIDOS';



/*CRIANDO TABELAS DE DIMENSÃO*/
--CLIENTE
CREATE TABLE DIM_CLIENTE (
  COD_CLIENTE NUMBER(10) PRIMARY KEY
);

--USUARIO
CREATE TABLE DIM_USUARIO (
  COD_USUARIO NUMBER(5) PRIMARY KEY
);

--VENDEDOR
CREATE TABLE DIM_VENDEDOR (
  COD_VENDEDOR NUMBER(4) PRIMARY KEY
);

--STATUS
CREATE TABLE DIM_STATUS (
  COD_STATUS NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  STATUS_DESC VARCHAR2(20)
);

--DATAS
CREATE TABLE DIM_DATA (
  COD_DATA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  DATA DATE,
  DIA NUMBER,
  MES NUMBER,
  ANO NUMBER,
  DIA_SEMANA VARCHAR2(15)
);

--TABELA CENTRAL
CREATE TABLE FATO_PEDIDO (
  COD_PEDIDO NUMBER(10) PRIMARY KEY,
  COD_CLIENTE NUMBER(10),
  COD_USUARIO NUMBER(5),
  COD_VENDEDOR NUMBER(4),
  COD_DATA_PEDIDO NUMBER,
  COD_DATA_ENTREGA NUMBER,
  COD_DATA_CANCELAMENTO NUMBER,
  VAL_TOTAL_PEDIDO NUMBER(12,2),
  VAL_DESCONTO NUMBER(12,2),
  COD_STATUS NUMBER,
  FOREIGN KEY (COD_CLIENTE) REFERENCES DIM_CLIENTE(COD_CLIENTE),
  FOREIGN KEY (COD_USUARIO) REFERENCES DIM_USUARIO(COD_USUARIO),
  FOREIGN KEY (COD_VENDEDOR) REFERENCES DIM_VENDEDOR(COD_VENDEDOR),
  FOREIGN KEY (COD_DATA_PEDIDO) REFERENCES DIM_DATA(COD_DATA),
  FOREIGN KEY (COD_DATA_ENTREGA) REFERENCES DIM_DATA(COD_DATA),
  FOREIGN KEY (COD_DATA_CANCELAMENTO) REFERENCES DIM_DATA(COD_DATA),
  FOREIGN KEY (COD_STATUS) REFERENCES DIM_STATUS(COD_STATUS)
);


--POPULANDO
INSERT INTO DIM_STATUS (STATUS_DESC)
SELECT DISTINCT STATUS
FROM TABELA_DE_PEDIDOS
WHERE STATUS IS NOT NULL;

INSERT INTO DIM_DATA (DATA, DIA, MES, ANO, DIA_SEMANA)
SELECT DISTINCT dat_pedido,
       EXTRACT(DAY FROM dat_pedido),
       EXTRACT(MONTH FROM dat_pedido),
       EXTRACT(YEAR FROM dat_pedido),
       TO_CHAR(dat_pedido, 'Day', 'NLS_DATE_LANGUAGE=PORTUGUESE')
FROM TABELA_DE_PEDIDOS
WHERE dat_pedido IS NOT NULL;

INSERT INTO DIM_CLIENTE (COD_CLIENTE)
SELECT DISTINCT COD_CLIENTE FROM TABELA_DE_PEDIDOS WHERE COD_CLIENTE IS NOT NULL;

INSERT INTO DIM_USUARIO (COD_USUARIO)
SELECT DISTINCT COD_USUARIO FROM TABELA_DE_PEDIDOS WHERE COD_USUARIO IS NOT NULL;

INSERT INTO DIM_VENDEDOR (COD_VENDEDOR)
SELECT DISTINCT COD_VENDEDOR FROM TABELA_DE_PEDIDOS WHERE COD_VENDEDOR IS NOT NULL;



-- EX2: Criação de Procedures para Dimensões

--PROC TABELA CLIENTE
CREATE OR REPLACE PROCEDURE PROC_INSERE_CLIENTE(p_cod_cliente IN NUMBER) IS
BEGIN
  IF p_cod_cliente IS NOT NULL THEN
    INSERT INTO DIM_CLIENTE (COD_CLIENTE)
    SELECT p_cod_cliente FROM DUAL
    WHERE NOT EXISTS (
      SELECT 1 FROM DIM_CLIENTE WHERE COD_CLIENTE = p_cod_cliente
    );
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro ao inserir cliente: ' || SQLERRM);
END;
/

/****/
--PROC TABELA USUARIO
CREATE OR REPLACE PROCEDURE PROC_INSERE_USUARIO(p_cod_usuario IN NUMBER) IS
BEGIN
  IF p_cod_usuario IS NOT NULL THEN
    INSERT INTO DIM_USUARIO (COD_USUARIO)
    SELECT p_cod_usuario FROM DUAL
    WHERE NOT EXISTS (
      SELECT 1 FROM DIM_USUARIO WHERE COD_USUARIO = p_cod_usuario
    );
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro ao inserir usuário: ' || SQLERRM);
END;
/

/****/
--PROC TABELA VENDEDOR
CREATE OR REPLACE PROCEDURE PROC_INSERE_VENDEDOR(p_cod_vendedor IN NUMBER) IS
BEGIN
  IF p_cod_vendedor IS NOT NULL THEN
    INSERT INTO DIM_VENDEDOR (COD_VENDEDOR)
    SELECT p_cod_vendedor FROM DUAL
    WHERE NOT EXISTS (
      SELECT 1 FROM DIM_VENDEDOR WHERE COD_VENDEDOR = p_cod_vendedor
    );
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro ao inserir vendedor: ' || SQLERRM);
END;
/

/****/
--PROC TABELA STATUS
CREATE OR REPLACE PROCEDURE PROC_INSERE_STATUS(p_status IN VARCHAR2) IS
  v_exists NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_exists
  FROM DIM_STATUS
  WHERE UPPER(STATUS_DESC) = UPPER(p_status);

  IF v_exists = 0 THEN
    INSERT INTO DIM_STATUS (STATUS_DESC) VALUES (p_status);
  END IF;

EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro ao inserir status: ' || SQLERRM);
END;
/

/****/
--PROC TABELA DATA
CREATE OR REPLACE PROCEDURE PROC_INSERE_DATA(p_data IN DATE) IS
BEGIN
  IF p_data IS NOT NULL THEN
    INSERT INTO DIM_DATA (DATA, DIA, MES, ANO, DIA_SEMANA)
    SELECT p_data,
           EXTRACT(DAY FROM p_data),
           EXTRACT(MONTH FROM p_data),
           EXTRACT(YEAR FROM p_data),
           TO_CHAR(p_data, 'Day', 'NLS_DATE_LANGUAGE=PORTUGUESE')
    FROM DUAL
    WHERE NOT EXISTS (
      SELECT 1 FROM DIM_DATA WHERE DATA = p_data
    );
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro ao inserir data: ' || SQLERRM);
END;
/

BEGIN
  PROC_INSERE_CLIENTE(123);
  PROC_INSERE_USUARIO(45);
  PROC_INSERE_VENDEDOR(789);
  PROC_INSERE_STATUS('PENDENTE');
  PROC_INSERE_DATA(SYSDATE);
END;
/

SELECT object_name, status
FROM user_objects
WHERE object_type = 'PROCEDURE';

/****/





















































