/*
CP 1 - ENTREGA DIA 23/03
LUIS HENRIQUE RM552692
SABRINA CAFÉ RM553568
MATHEUS DUARTE RM554199
*/

CREATE TABLE tabela_de_pedidos AS 
SELECT * FROM PF1788.PEDIDO;

SELECT COUNT(*) FROM tabela_de_pedidos;--QUANTOS RESULTADOS APARECERAM

--CONFERINDO OS RESULTADOS NA TABELA DO PROFESSOR...
SELECT * FROM tabela_de_pedidos FETCH FIRST 10 ROWS ONLY; 

DESC tabela_de_pedidos;

/**************************************************************************/

SET SERVEROUTPUT ON;



-- EX1: Desenvolvimento do Modelo Estrela

--VERIFICANDO MINHAS CHAVES ESTRANGEIRAS
SELECT constraint_name, table_name, column_name, r_constraint_name
FROM user_cons_columns
WHERE constraint_name IN (
  SELECT constraint_name
  FROM user_constraints
  WHERE constraint_type = 'R'
);


--VERICANDO AS FK DA TABELA
SELECT a.constraint_name, a.table_name, a.column_name,
       c.r_constraint_name, c.table_name AS referenced_table
FROM user_cons_columns a
JOIN user_constraints c
  ON a.constraint_name = c.constraint_name
WHERE c.constraint_type = 'R'
  AND a.table_name = 'TABELA_DE_PEDIDOS';



/*CRIANDO TABELAS DE DIMENSÃO*/
--CLIENTE
CREATE TABLE DIM_CLIENTE (
  COD_CLIENTE NUMBER(10) PRIMARY KEY,
  NOME_CLIENTE VARCHAR2(100),
  RAZAO_SOCIAL VARCHAR2(100),
  TIPO_PESSOA CHAR(1),
  CPF_CNPJ NUMBER(15),
  DATA_CADASTRO DATE,
  DATA_CANCELAMENTO DATE,
  STATUS_ATIVO CHAR(1)
);

--USUARIO
CREATE TABLE DIM_USUARIO (
  COD_USUARIO NUMBER(5) PRIMARY KEY,
  NOME_USUARIO VARCHAR2(100),
  PERFIL VARCHAR2(50)
);

--VENDEDOR
CREATE TABLE DIM_VENDEDOR (
  COD_VENDEDOR NUMBER(4) PRIMARY KEY,
  NOME_VENDEDOR VARCHAR2(100),
  STATUS_ATIVO CHAR(1)
);

--STATUS
CREATE TABLE DIM_STATUS (
  COD_STATUS NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  STATUS_DESC VARCHAR2(20)
);

--DATAS
CREATE TABLE DIM_DATA (
  COD_DATA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  DATA DATE,
  DIA NUMBER,
  MES NUMBER,
  ANO NUMBER,
  DIA_SEMANA VARCHAR2(15)
);

--TABELA CENTRAL
CREATE TABLE FATO_PEDIDO (
  COD_PEDIDO NUMBER(10) PRIMARY KEY,
  
  --CHAVE
  COD_CLIENTE NUMBER(10),
  COD_USUARIO NUMBER(5),
  COD_VENDEDOR NUMBER(4),
  COD_STATUS NUMBER,
  COD_DATA_PEDIDO NUMBER,
  COD_DATA_ENTREGA NUMBER,
  COD_DATA_CANCELAMENTO NUMBER,
  
  --METRICA
  VAL_TOTAL_PEDIDO NUMBER(12,2),
  VAL_DESCONTO NUMBER(12,2),
  
  --FK
  FOREIGN KEY (COD_CLIENTE) REFERENCES DIM_CLIENTE(COD_CLIENTE),
  FOREIGN KEY (COD_USUARIO) REFERENCES DIM_USUARIO(COD_USUARIO),
  FOREIGN KEY (COD_VENDEDOR) REFERENCES DIM_VENDEDOR(COD_VENDEDOR),
  FOREIGN KEY (COD_STATUS) REFERENCES DIM_STATUS(COD_STATUS),
  FOREIGN KEY (COD_DATA_PEDIDO) REFERENCES DIM_DATA(COD_DATA),
  FOREIGN KEY (COD_DATA_ENTREGA) REFERENCES DIM_DATA(COD_DATA),
  FOREIGN KEY (COD_DATA_CANCELAMENTO) REFERENCES DIM_DATA(COD_DATA)
);

SELECT * FROM DIM_USUARIO;



--POPULANDO

--DIM CLIENTE
INSERT INTO CLIENTE (COD_CLIENTE, NOM_CLIENTE, DES_RAZAO_SOCIAL, TIP_PESSOA, NUM_CPF_CNPJ, DAT_CADASTRO, STA_ATIVO)
SELECT DISTINCT p.COD_CLIENTE, 'Cliente ' || p.COD_CLIENTE, 'Razao Social ' || p.COD_CLIENTE, 'F', 99999999999, SYSDATE, 'S'
FROM TABELA_DE_PEDIDOS p
WHERE NOT EXISTS (
  SELECT 1 FROM CLIENTE c WHERE c.COD_CLIENTE = p.COD_CLIENTE
);

--DIM USUARIO
INSERT INTO DIM_USUARIO (COD_USUARIO, NOME_USUARIO, PERFIL)
SELECT DISTINCT
    u.ID,              
    u.NOME,             
    'Perfil padrão'      
FROM USUARIO u
JOIN TABELA_DE_PEDIDOS p ON p.COD_USUARIO = u.ID;

--DIM VENDEDOR
INSERT INTO VENDEDOR (COD_VENDEDOR, NOM_VENDEDOR, STA_ATIVO)
SELECT DISTINCT 
    p.COD_VENDEDOR, 
    'Vendedor ' || p.COD_VENDEDOR, 
    'S'
FROM TABELA_DE_PEDIDOS p
WHERE NOT EXISTS (
    SELECT 1 FROM VENDEDOR v WHERE v.COD_VENDEDOR = p.COD_VENDEDOR
);

--DIM STATUS
INSERT INTO DIM_STATUS (STATUS_DESC)
SELECT DISTINCT STATUS
FROM TABELA_DE_PEDIDOS
WHERE STATUS IS NOT NULL;

--DIM DATA
INSERT INTO DIM_DATA (DATA, DIA, MES, ANO, DIA_SEMANA)
SELECT DISTINCT data_col,
       EXTRACT(DAY FROM data_col),
       EXTRACT(MONTH FROM data_col),
       EXTRACT(YEAR FROM data_col),
       TO_CHAR(data_col, 'Day', 'NLS_DATE_LANGUAGE=PORTUGUESE')
FROM (
  SELECT dat_pedido AS data_col FROM TABELA_DE_PEDIDOS
  UNION
  SELECT dat_entrega FROM TABELA_DE_PEDIDOS
  UNION
  SELECT dat_cancelamento FROM TABELA_DE_PEDIDOS
)
WHERE data_col IS NOT NULL;


-- EX2: Criação de Procedures para Dimensões

--PROC TABELA CLIENTE
CREATE OR REPLACE PROCEDURE PROC_INSERE_CLIENTE(p_cod_cliente IN NUMBER) IS
  v_cliente CLIENTE%ROWTYPE;
BEGIN
  IF p_cod_cliente IS NULL THEN
    RAISE_APPLICATION_ERROR(-20001, 'Código do cliente não pode ser nulo.');
  END IF;

  SELECT * INTO v_cliente FROM CLIENTE WHERE COD_CLIENTE = p_cod_cliente;

  INSERT INTO DIM_CLIENTE (COD_CLIENTE, NOME_CLIENTE, RAZAO_SOCIAL, TIPO_PESSOA, CPF_CNPJ, DATA_CADASTRO, DATA_CANCELAMENTO, STATUS_ATIVO)
  VALUES (v_cliente.COD_CLIENTE, v_cliente.NOM_CLIENTE, v_cliente.DES_RAZAO_SOCIAL, v_cliente.TIP_PESSOA, v_cliente.NUM_CPF_CNPJ, v_cliente.DAT_CADASTRO, v_cliente.DAT_CANCELAMENTO, v_cliente.STA_ATIVO);

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Cliente não encontrado na tabela CLIENTE.');
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('Cliente já existe na dimensão.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro inesperado: ' || SQLERRM);
END;
/

/****/
--PROC TABELA USUARIO
CREATE OR REPLACE PROCEDURE PROC_INSERE_USUARIO(p_cod_usuario IN NUMBER) IS
  v_usuario USUARIO%ROWTYPE;
BEGIN
  IF p_cod_usuario IS NULL THEN
    RAISE_APPLICATION_ERROR(-20002, 'Código do usuário não pode ser nulo.');
  END IF;

  SELECT * INTO v_usuario FROM USUARIO WHERE ID = p_cod_usuario;

  INSERT INTO DIM_USUARIO (COD_USUARIO, NOME_USUARIO, PERFIL)
  VALUES (v_usuario.ID, v_usuario.NOME, 'Perfil padrão');

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Usuário não encontrado na tabela USUARIO.');
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('Usuário já existe na dimensão.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro inesperado: ' || SQLERRM);
END;
/

/****/
--PROC TABELA VENDEDOR
-- PROCEDURE DIM_VENDEDOR
CREATE OR REPLACE PROCEDURE PROC_INSERE_VENDEDOR(p_cod_vendedor IN NUMBER) IS
  v_vendedor VENDEDOR%ROWTYPE;
BEGIN
  IF p_cod_vendedor IS NULL THEN
    RAISE_APPLICATION_ERROR(-20003, 'Código do vendedor não pode ser nulo.');
  END IF;

  SELECT * INTO v_vendedor FROM VENDEDOR WHERE COD_VENDEDOR = p_cod_vendedor;

  INSERT INTO DIM_VENDEDOR (COD_VENDEDOR, NOME_VENDEDOR, STATUS_ATIVO)
  VALUES (v_vendedor.COD_VENDEDOR, v_vendedor.NOM_VENDEDOR, v_vendedor.STA_ATIVO);

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Vendedor não encontrado na tabela VENDEDOR.');
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('Vendedor já existe na dimensão.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro inesperado: ' || SQLERRM);
END;
/

/****/
--PROC TABELA STATUS
CREATE OR REPLACE PROCEDURE PROC_INSERE_STATUS(p_status IN VARCHAR2) IS
BEGIN
  IF p_status IS NULL OR LENGTH(TRIM(p_status)) = 0 THEN
    RAISE_APPLICATION_ERROR(-20004, 'Descrição do status não pode ser vazia.');
  END IF;

  INSERT INTO DIM_STATUS (STATUS_DESC)
  SELECT p_status FROM DUAL
  WHERE NOT EXISTS (
    SELECT 1 FROM DIM_STATUS WHERE UPPER(STATUS_DESC) = UPPER(p_status)
  );

EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('Status já existe na dimensão.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro inesperado: ' || SQLERRM);
END;
/

/****/
--PROC TABELA DATA
CREATE OR REPLACE PROCEDURE PROC_INSERE_DATA(p_data IN DATE) IS
BEGIN
  IF p_data IS NULL THEN
    RAISE_APPLICATION_ERROR(-20005, 'Data não pode ser nula.');
  END IF;

  INSERT INTO DIM_DATA (DATA, DIA, MES, ANO, DIA_SEMANA)
  SELECT p_data,
         EXTRACT(DAY FROM p_data),
         EXTRACT(MONTH FROM p_data),
         EXTRACT(YEAR FROM p_data),
         TO_CHAR(p_data, 'Day', 'NLS_DATE_LANGUAGE=PORTUGUESE')
  FROM DUAL
  WHERE NOT EXISTS (
    SELECT 1 FROM DIM_DATA WHERE DATA = p_data
  );

EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('Data já existe na dimensão.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro inesperado: ' || SQLERRM);
END;
/

-- Exemplo para testar as procedures criadas
BEGIN
  PROC_INSERE_CLIENTE(74);
  PROC_INSERE_USUARIO(1);
  PROC_INSERE_VENDEDOR(10);
  PROC_INSERE_STATUS('PENDENTE');
  PROC_INSERE_DATA(SYSDATE);
END;
/

BEGIN
  PROC_INSERE_CLIENTE(123);
  PROC_INSERE_USUARIO(45);
  PROC_INSERE_VENDEDOR(789);
  PROC_INSERE_STATUS('PENDENTE');
  PROC_INSERE_DATA(SYSDATE);
END;
/

SELECT object_name, status
FROM user_objects
WHERE object_type = 'PROCEDURE';

/****/























































